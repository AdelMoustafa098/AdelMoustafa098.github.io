---
title: "ClimAct"
layout: post
date: 2024-11-06 5:13
image: https://www.environmental-project.org/wp-content/uploads/AdobeStock_573925621-scaled.jpeg
headerImage: True
projects: true
tag:
- AWS
- Cloud
- LLMs
- ChatBot
star: true
category: blog
author: Adel Moussa
description: intelligent assistant for understanding and combating the effects of climate change hosted on AWS
---
<h1 style="text-align: center;">ClimAct</h1>
<h2 style="text-align: center;">Your intelligent assistant for understanding and combating the effects of climate change.</h2>



## Introduction

Climate change is one of the most pressing global issues today, affecting
ecosystems, communities, and economies worldwide. The rising temperatures,
melting ice caps, extreme weather events, and shifts in biodiversity threaten
livelihoods and natural resources. To tackle these growing issues, accurate and
timely information is essential. Policymakers and local communities need tools to
understand, predict, and mitigate the effects of climate change on their specific
regions. The objective of this project is to provide a solution that helps communities and decision-makers assess localized impacts of climate change and provide actionable
recommendations for adaptation and mitigation.

## Solution Overview

The proposed solution is an AI-driven system hosted on AWS designed to predict and assess the localized impacts of climate change using the ReAct (Reasoning and Acting)
framework. The system leverages advanced Natural Language Processing (NLP)
models and real-time climate data to provide customized advice and
recommendations to communities and policymakers. By integrating multiple data
sources, including climate research and environmental reports, the system
generates targeted solutions for climate adaptation and mitigation.

## Implementation

The following image shows AWS cloud architecture  that is used to host and power the application.

![/assets/images/AWS_Arch.JPG]()  

the work flow is as following:

1. `Client Sends Request (Website on Streamlit):`  

    ● The client interacts with a web application hosted on Streamlit.
    Streamlit is a Python-based framework for creating web apps.  
    ● The client inputs a prompt or some request, and the web app captures
    this request.

2. `Request Sent to AWS Lambda via API Gateway:`  

    ● The request from the Streamlit app is sent to AWS Lambda through
    the API Gateway.  
    ● API Gateway acts as the front door for the Lambda function, enabling the secure transmission of HTTP requests. In this case, it's handling the communication between the client and Lambda.


3. `Lambda Logic (Includes React Logic):  `

    ● The AWS Lambda function contains the main logic that processes the request. You mentioned "React logic," but in this context, it's likely referring to logic related to the application's frontend or orchestration logic inside Lambda, not actual React code.   
    ● Lambda functions are serverless, meaning they are event-driven and only run when triggered, in this case by the API Gateway.


4. `Lambda Calls AWS Bedrock API (LLM):`  


    ● Inside the Lambda function, it then calls the Bedrock API (a service in AWS that provides access to Large Language Models - LLMs).  
    ● The prompt from the client (sent via the Streamlit app) is passed to AWS Bedrock to process with an LLM. This could be any model Bedrock supports for AI tasks like text generation, question-answering, etc.


5. `Response Flow Back to Lambda: `   
    ● Once the LLM in Bedrock processes the prompt, the response (like the output text generated by the LLM) is sent back to the Lambda function.


6. `Response to API Gateway:`


    ● The Lambda function then forwards this response back to the API
    Gateway, which is responsible for sending it back to the client.


7. `Response to the Client (Streamlit App):`


    ● Finally, the API Gateway sends the processed response back to the Streamlit app, where the client sees the result of their original request.


## Demo  

<iframe src="https://drive.google.com/file/d/10q-_Zj9iO8iojHxvCWj9ZEnYkzpC0hnp/preview" width="640" height="480" allow="autoplay"></iframe>